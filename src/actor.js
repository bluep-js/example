const { AbstractActor } = require('@bluepjs/vm')

/**
  Demo Actor is a simple object, with `counter` state
  When Demo Actor object is created - it starts 5 secons interval function incrementing counter state by one on every tick.
  Demo Actor has two methods:
    - reset - to reset `counter` state to zero
    - set(counter) - to set `counter` state to `counter` input
  On every interval tick Demo Counter emits `tick` event with `counter` state output
*/
class DemoActor extends AbstractActor {
  /**
    Static method provide information about actor for IDE
    overrides static AbstractActor::metadata()
  */
  static metadata () {
    return {
      code: 'demo',
      name: 'Demo Actor',
      state: {
        counter: {
          code: 'counter',
          name: 'Counter',
          type: 'basic/number'
        }
      },
      methods: {
        reset: {
          code: 'reset',
          name: 'Reset'
        },
        set: {
          code: 'set',
          name: 'Set',
          inputs: {
            counter: {
              code: 'counter',
              name: 'Counter',
              type: 'basic/number'
            }
          }
        }
      },
      events: {
        tick: {
          code: 'tick',
          event: 'tick',
          name: 'Tick',
          outputs: {
            counter: {
              code: 'counter',
              name: 'Counter',
              type: 'basic/number'
            }
          }
        }
      }
    }
  }

  /**
    Constructor
    overrides AbstractActor::constructor(id)
    @param id - unique actor id. if not exists - autogenerated with uuid.v4
  */
  constructor (id) {
    super(id)
    this.reset()
    setInterval(() => {
      this._tick++
      this.emit('tick', { counter: this._tick })
    }, 5000)
  }

  /**
    Actor state getter
    overrides AbstractActor::state(code)
    @param code - if exists returns only state[code] field. otherwise return full state
  */
  state (code) {
    if (code === 'counter') {
      return this._tick
    }
    return { counter: this._tick }
  }

  /**
    Demo Actor reset methed
    resets counter to zero
  */
  reset () {
    this._tick = 0
  }

  /**
    Actor method function
    overrides AbstractActor::method(method, inputs)
    @param method - method code
    @param inputs - method inputs object
  */
  async method (method, inputs) {
    if (this._vm && this._vm._debug) {
      this._vm.console().log('DemoActor::method', method, inputs)
    }
    if (method === 'reset') {
      this._tick = 0
    }
    if (method === 'set' && inputs && typeof inputs.counter === 'number') {
      this._tick = inputs.counter
    }
  }
}

module.exports = DemoActor
